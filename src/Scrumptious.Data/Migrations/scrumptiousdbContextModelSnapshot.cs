// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scrumptious.Data.Models;

namespace Scrumptious.Data.Migrations
{
    [DbContext(typeof(scrumptiousdbContext))]
    partial class scrumptiousdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Scrumptious.Data.Models.Backlog", b =>
                {
                    b.Property<int>("BacklogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkSprintId")
                        .HasColumnName("fk_SprintId");

                    b.HasKey("BacklogId");

                    b.HasIndex("FkSprintId");

                    b.ToTable("Backlog");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnName("Project_Description")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnName("Project_Name")
                        .HasMaxLength(250);

                    b.Property<string>("ProjectRequirements")
                        .IsRequired()
                        .HasColumnName("Project_Requirements")
                        .HasColumnType("text");

                    b.HasKey("ProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Sprint", b =>
                {
                    b.Property<int>("SprintId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("FkProjectId")
                        .HasColumnName("fk_ProjectId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SprintDescription")
                        .IsRequired()
                        .HasColumnName("Sprint_Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("SprintId");

                    b.HasIndex("FkProjectId");

                    b.ToTable("Sprint");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed");

                    b.Property<int>("FkTaskId")
                        .HasColumnName("fk_TaskId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("StepDescription")
                        .IsRequired()
                        .HasColumnName("Step_Description")
                        .HasColumnType("text");

                    b.HasKey("StepId");

                    b.HasIndex("FkTaskId");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed");

                    b.Property<int>("FkBacklogId")
                        .HasColumnName("fk_BacklogId");

                    b.Property<int?>("FkUserId")
                        .HasColumnName("fk_UserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnName("Task_Description")
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("FkBacklogId");

                    b.HasIndex("FkUserId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Backlog", b =>
                {
                    b.HasOne("Scrumptious.Data.Models.Sprint", "FkSprint")
                        .WithMany("Backlog")
                        .HasForeignKey("FkSprintId")
                        .HasConstraintName("fk_SprintId");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Sprint", b =>
                {
                    b.HasOne("Scrumptious.Data.Models.Project", "FkProject")
                        .WithMany("Sprint")
                        .HasForeignKey("FkProjectId")
                        .HasConstraintName("fk_ProjectId");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Step", b =>
                {
                    b.HasOne("Scrumptious.Data.Models.Task", "FkTask")
                        .WithMany("Step")
                        .HasForeignKey("FkTaskId")
                        .HasConstraintName("fk_Step_TaskId");
                });

            modelBuilder.Entity("Scrumptious.Data.Models.Task", b =>
                {
                    b.HasOne("Scrumptious.Data.Models.Backlog", "FkBacklog")
                        .WithMany("Task")
                        .HasForeignKey("FkBacklogId")
                        .HasConstraintName("fk_BacklogId");

                    b.HasOne("Scrumptious.Data.Models.User", "FkUser")
                        .WithMany("Task")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("fk_UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
